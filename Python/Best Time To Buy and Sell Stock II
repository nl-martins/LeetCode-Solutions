/**
*	Description
*	Say you have an array prices for which the ith element is the price of a given stock on day i.
*	Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).
*
*	Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).
*
*	@nl-martins: This solution works because you only have to return the maximum profit. 
*				 If you were require to return all the operations that you made (when you bought and when you sold)
*				 it wouldn't work. 
*/
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        max_profit = 0
        for i,x in enumerate(prices[1:]) :
            if x > prices[i] :						#if current price is greater than last one - > take profit
            	max_profit += x - prices [i]		
            
        return max_profit
